"Account represents the base user data: user's stakes and delegations"
type Account @entity {
  "ID is the account's ETH address"
  id: ID!
  stakes: [StakeData!] @derivedFrom(field: "owner")
  delegatee: TokenholderDelegation
}

"StakeData represents the information about each stake"
type StakeData @entity {
  "ID is the staking provider's ETH address"
  id: ID!
  owner: Account!
  beneficiary: Bytes!
  authorizer: Bytes!
  "Staked T token total amount"
  stakedAmount: BigInt!
  delegatee: StakeDelegation
  authorizations: [AppAuthorization!] @derivedFrom(field: "stake")
}

"AppAuthorizations represents the stake authorizations to Threshold apps"
type AppAuthorization @entity {
  "ID is <staking provider address>-<application address>"
  id: ID!
  "Application contract address"
  appAddress: Bytes!
  "Stake data of the staking provider"
  stake: StakeData!
  "Amount of total T currently authorized to the application"
  amount: BigInt!
  "Amount of T that is being deauthorized"
  amountDeauthorizing: BigInt!
  "Application name (if known)"
  appName: String
}

"AppAuthHistory stores each change in the stake's authorization of apps"
type AppAuthHistory @entity(immutable: true) {
  "IS is <staking provider address>-<application address>-<block number>"
  id: ID!
  "AppAuthorization of this update in the authorization"
  appAuthorization: AppAuthorization!
  "Amount of total T authorized by staking provider to the application in this block"
  amount: BigInt!
  "Type of event that caused this update"
  eventType: String!
  "Block in which this authorization update became effective"
  blockNumber: BigInt!
  "Timestamp in which this authorization update became effective"
  timestamp: BigInt!
}

"MinStakeAmount represents the minimum amount of tokens to stake"
type MinStakeAmount @entity {
  "ID is min-stake + transaction hash in which the amount changed"
  id: ID!
  amount: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!
}

interface Delegation {
  "The delegatee address"
  id: ID!
  totalWeight: BigInt!
}

"StakeDelegation represents the delegatee to whom the Stake DAO voting power has been delegated"
type StakeDelegation implements Delegation @entity {
  "ID is delegatee ETH address"
  id: ID!
  "Stakes in the T network, tracked by T staking contract"
  totalWeight: BigInt!
  stakeDelegators: [StakeData!] @derivedFrom(field: "delegatee")
}

"TokenholderDelegation represents the delegatee to whom the TokenHolder DAO voting power has been delegated"
type TokenholderDelegation implements Delegation @entity {
  "ID is delegatee ETH address"
  id: ID!
  "Liquid T plus staked T in the T network. Legacy stakes (NU/KEEP) count for tokenholders' voting power, but not for the total voting power of the Tokenholder DAO (as it's already accounted by the Vending Machines)"
  totalWeight: BigInt!
  "Liquid T, tracked by the T Token contract"
  liquidWeight: BigInt!
  delegators: [Account!] @derivedFrom(field: "delegatee")
}

"DAOMetric represents the liquid and staked T tokens in Threshold Network DAO"
type DAOMetric @entity {
  "ID is 'dao-metrics' (singleton entity)"
  id: ID!
  liquidTotal: BigInt!
  stakedTotal: BigInt!
}

"TACoOperator represents the TACo operator's info of a staking provider"
type TACoOperator @entity {
  "ID is the staking provider address"
  id: ID!
  "Operator's address"
  operator: Bytes!
  "Timestamp in which the current operator was bonded to the staking provider"
  bondedTimestamp: BigInt!
  "Timestamp in which the first operator of this staking provider was bonded"
  bondedTimestampFirstOperator: BigInt
}

"TACo commitments made by a staking provider"
type TACoCommitment @entity(immutable: true) {
  "ID is the staking provider address"
  id: ID!
  "Timestamp of the end of the lock-up"
  endCommitment: BigInt!
  "Selected duration in month of the lock-up"
  duration: Int!
}
