"Account represents the base user data: user's stakes and delegations"
type Account @entity {
  "ID is the account's ETH address"
  id: ID!
  stakes: [StakeData!] @derivedFrom(field: "owner")
  delegatee: TokenholderDelegation
}

"StakeData represents the information about each stake"
type StakeData @entity {
  "ID is the staking provider's ETH address"
  id: ID!
  owner: Account!
  beneficiary: Bytes!
  authorizer: Bytes!
  "Staked native T token amount"
  tStake: BigInt!
  "Staked legacy KEEP token amount converted to T"
  keepInTStake: BigInt!
  "Staked legacy Nu token amount converted to T"
  nuInTStake: BigInt!
  "Staked T token total amount (T + KEEP in T + Nu in T)"
  totalStaked: BigInt!
  delegatee: StakeDelegation
  authorizations: [AppAuthorization!] @derivedFrom(field: "stake")
}

"EpochStake represents a single stake in a single epoch"
type EpochStake @entity {
  "ID is the staking provider's ETH address + epoch counter"
  id: ID!
  epoch: Epoch!
  stakingProvider: Bytes!
  owner: Bytes!
  amount: BigInt!
}

"Epoch represents the staking status of the network at each time instant"
type Epoch @entity {
  "ID is a counter number starting at 0"
  id: ID!
  "UNIX timestamp in which this epoch begins"
  timestamp: BigInt!
  "Duration of this epoch in seconds"
  duration: BigInt
  "T total amount resulted of all stakes in this epoch"
  totalAmount: BigInt!
  "List of active stakes during this epoch"
  stakes: [EpochStake!]
}

"EpochCounter represents the amount of epochs up to this moment"
type EpochCounter @entity {
  "ID is 'epoch-counter' (singleton entity)"
  id: ID!
  count: Int!
}

"MinStakeAmount represents the minimum amount of tokens to stake"
type MinStakeAmount @entity {
  "ID is min-stake + transaction hash in which the amount changed"
  id: ID!
  amount: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!
}

interface Delegation {
  "The delegatee address"
  id: ID!
  totalWeight: BigInt!
}

"StakeDelegation represents the delegatee to whom the Stake DAO voting power has been delegated"
type StakeDelegation implements Delegation @entity {
  "ID is delegatee ETH address"
  id: ID!
  "Stakes in the T network, tracked by T staking contract"
  totalWeight: BigInt!
  stakeDelegators: [StakeData!] @derivedFrom(field: "delegatee")
}

"TokenholderDelegation represents the delegatee to whom the TokenHolder DAO voting power has been delegated"
type TokenholderDelegation implements Delegation @entity {
  "ID is delegatee ETH address"
  id: ID!
  "Liquid T plus staked T in the T network. Legacy stakes (NU/KEEP) count for tokenholders' voting power, but not for the total voting power of the Tokenholder DAO (as it's already accounted by the Vending Machines)"
  totalWeight: BigInt!
  "Liquid T, tracked by the T Token contract"
  liquidWeight: BigInt!
  delegators: [Account!] @derivedFrom(field: "delegatee")
}

"SimplePREApplication represents the state of Simple Proxy ReEncryption operators"
type SimplePREApplication @entity {
  "ID is the staking provider ETH address"
  id: ID!
  "Operator's ETH address"
  operator: Bytes!
  "Stake related to this PRE operator"
  stake: StakeData!
  "UNIX timestamp in which an operator was bonded for this staking provider for first time"
  bondedTimestamp: BigInt
  "UNIX timestamp in which an operator was confirmed for this staking provider for first time"
  confirmedTimestamp: BigInt
}

"DAOMetric represents the liquid and staked T tokens in Threshold Network DAO"
type DAOMetric @entity {
  "ID is 'dao-metrics' (singleton entity)"
  id: ID!
  liquidTotal: BigInt!
  stakedTotal: BigInt!
}

"AppAuthorizations represents the stake authorizations to Threshold apps"
type AppAuthorization @entity {
  "ID is <application address>-<staking provider address>"
  id: ID!
  "Application contract address"
  appAddress: Bytes!
  "Stake data of the staking provider"
  stake: StakeData!
  "Amount of total T authorized by staking provider to the application"
  amount: BigInt!
  "Amount of T that will left after the deauthorization process"
  amountDeauthorizingTo: BigInt!
  "Application name (if known)"
  app: String
}

"AppAuthorizationInBlock represents the stake authorization to Threhold app in a specific block"
type AppAuthorizationInBlock @entity {
  "ID is <block number>-<application address>-<staking provider address>"
  id: ID!
  "Block in which this authorization was in effect"
  blockNumber: BigInt!
  "Timestamp of the block in which authorization was in effect"
  timestamp: BigInt!
  "Application contract address"
  appAddress: Bytes!
  "Staking provider address"
  stakingProvider: Bytes!
  "Amount of total T authorized by staking provider to the application in this block"
  amount: BigInt!
}
